# LISTEN_ADDRESS defines the host:port for the lspd grpc server. The best way is
# to use a local host:port and run lspd behind a reverse proxy like 
# haproxy/nginx/caddy/traefik
LISTEN_ADDRESS=<HOSTNAME:PORT>

# You can also define a domain in CERTMAGIC_DOMAIN, and lspd will use certmagic
# to obtain a certificate from Let's Encrypt
#CERTMAGIC_DOMAIN=<DOMAIN>

# DATABASE_URL is the postgresql db url in the form: 
# postgres://username:password@host:port/dbname
# You can create the db and user with the following commands:
#CREATE ROLE <username>;
#ALTER ROLE <username> WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS PASSWORD '<password>';
#CREATE DATABASE <dbname> WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8';
#ALTER DATABASE <dbname> OWNER TO <username>;
DATABASE_URL=<DATABASE_URL>

# These variables are needed to send email using SES and the AWS_ACCESS_KEY_ID
# has to have the permission to send emails.
AWS_REGION=<aws region>
AWS_ACCESS_KEY_ID=<aws access key id>
AWS_SECRET_ACCESS_KEY=<aws secret access key>

OPENCHANNEL_NOTIFICATION_TO='["Name1 <user1@domain.com>"]'
OPENCHANNEL_NOTIFICATION_CC='["Name2 <user2@domain.com>","Name3 <user3@domain.com>"]'
OPENCHANNEL_NOTIFICATION_FROM="Name4 <user4@domain.com>"

CHANNELMISMATCH_NOTIFICATION_TO='["Name1 <user1@domain.com>"]'
CHANNELMISMATCH_NOTIFICATION_CC='["Name2 <user2@domain.com>","Name3 <user3@domain.com>"]'
CHANNELMISMATCH_NOTIFICATION_FROM="Name4 <user4@domain.com>"

# lspd uses the fee estimation from mempool.space for opening new channels. 
# Change below setting for you own mempool instance.
MEMPOOL_API_BASE_URL=https://mempool.space/api/v1/

# Priority to use for opening channels when using the mempool api.
# Valid options are: fastest, halfhour, hour, economy, minimum
# Defaults to economy
MEMPOOL_PRIORITY=economy

# lspd can be connected to multiple nodes at once. The NODES variable takes an
# array of nodes. Each node is either a cln or an lnd node and should have the
# corresponding "cln" or "lnd" key set. 
#
# TOKEN is a secret shared between the LSP (the lspd instance) and breez-server
# and is put in the header of each request. It should be unique for each node.
# You can generate it using for instance the command: openssl rand -base64 24
#
# LSPD_PRIVATE_KEY is a key generated and printed in the console when you run
# ./lspd genkey".
# When sending the lspd information to the client (the app), lspd adds the
# public key corresponding to this private key and the client encrypt all the
# messages sent to the LSP using this public key.
# The goal is to hide anything from breez-server which is the pass "opaque" data
# from the app to lspd.
#
# For other specific settings see the fields in `config.go` NodeConfig struct.
NODES='[ { "name": "<LSP NAME>", "nodePubkey": "<LIGHTNING NODE PUBKEY>", "lspdPrivateKey": "<LSPD PRIVATE KEY>", "token": "<ACCESS TOKEN>", "host": "<HOSTNAME:PORT for lightning clients>", "publicChannelAmount": "1000183", "channelAmount": "100000", "channelPrivate": false, "targetConf": "6", "minConfs": "6", "minHtlcMsat": "600", "baseFeeMsat": "1000", "feeRate": "0.000001", "timeLockDelta": "144", "channelFeePermyriad": "40", "channelMinimumFeeMsat": "2000000", "additionalChannelCapacity": "100000", "maxInactiveDuration": "3888000", "lnd": { "address": "<HOSTNAME:PORT>", "cert": "<LND_CERT base64>", "macaroon": "<LND_MACAROON hex>" } }, { "name": "<LSP NAME>", "nodePubkey": "<LIGHTNING NODE PUBKEY>", "lspdPrivateKey": "<LSPD PRIVATE KEY>", "token": "<ACCESS TOKEN>", "host": "<HOSTNAME:PORT for lightning clients>", "publicChannelAmount": "1000183", "channelAmount": "100000", "channelPrivate": false, "targetConf": "6", "minConfs": "6", "minHtlcMsat": "600", "baseFeeMsat": "1000", "feeRate": "0.000001", "timeLockDelta": "144", "channelFeePermyriad": "40", "channelMinimumFeeMsat": "2000000", "additionalChannelCapacity": "100000", "maxInactiveDuration": "3888000", "cln": { "pluginAddress": "<address the lsp cln plugin listens on (ip:port)>", "socketPath": "<path to the cln lightning-rpc socket file>" } } ]'
